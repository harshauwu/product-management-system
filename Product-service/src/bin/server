// #!/usr/bin/env node

// /**
//  * Module dependencies.
//  */
// const app = require('../app');
// const debug = require('debug')('server:server');
// const http = require('http');
// const CONFIG = require('../config/config');
// const { log } = require('../services/log.service');

// /**
//  * Get port from environment and store in Express.
//  */

// const port = normalizePort(CONFIG.port || '3000');
// app.set('port', port);

// /**
//  * Create HTTP server.
//  */

// const server = http.createServer(app);

// /**
//  * Listen on provided port, on all network interfaces.
//  */

// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);

// /**
//  * Normalize a port into a number, string, or false.
//  */

// function normalizePort (val) {
//     const port = parseInt(val, 10);

//     if (isNaN(port)) {
//     // named pipe
//         return val;
//     }

//     if (port >= 0) {
//     // port number
//         return port;
//     }

//     return false;
// }

// /**
//  * Event listener for HTTP server "error" event.
//  */

// function onError (error) {
//     if (error.syscall !== 'listen') {
//         throw error;
//     }

//     const bind = typeof port === 'string'
//         ? 'Pipe ' + port
//         : 'Port ' + port;

//     // handle specific listen errors with friendly messages
//     switch (error.code) {
//     case 'EACCES':
//         log.error(bind + ' requires elevated privileges');
//         process.exit(1);
//         break;
//     case 'EADDRINUSE':
//         log.error(bind + ' is already in use');
//         process.exit(1);
//         break;
//     default:
//         throw error;
//     }
// }

// /**
//  * Event listener for HTTP server "listening" event.
//  */

// function onListening () {
//     const addr = server.address();
//     const bind = typeof addr === 'string'
//         ? 'pipe ' + addr
//         : 'port ' + addr.port;
//     debug('Listening on ' + bind);
//     log.info('Server listening on port:'+ addr.port);
// }

const cluster = require('cluster');
const os = require('os');
const path = require('path');

// Number of CPUs to determine the number of workers
const numCPUs = os.cpus().length;

if (cluster.isMaster) {
    console.log(`Master ${process.pid} is running`);

    // Fork workers for each CPU core
    for (let i = 0; i < numCPUs; i++) {
        cluster.fork();
    }

    cluster.on('exit', (worker, code, signal) => {
        console.log(`Worker ${worker.process.pid} died`);
        console.log('Starting a new worker...');
        cluster.fork();
    });
} else {
    // Start the express app for each worker
    require(path.join(__dirname, '../../src/app.js'));

}
